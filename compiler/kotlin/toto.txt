; created by the if compiler
jmp ft_emain


; *** VARIABLES ***
FT_CONSOLE_CURSOR_POS: var #1
FT_CONSOLE_COLOR: var #1
FT_DATA_STACK_BEGIN: var #256
FT_RETURN_STACK_BEGIN: var #256

; *** END OF VARIABLES ***


; *** STRINGS ***


; *** END OF STRINGS ***


; *** FUNCTIONS ***
; &&& test
test:
loadn r0, #20
call ft_ds_push
loadn r0, #0
call ft_ds_push
test_loop0_prepare:
call ft_ds_swap
call ft_rs_ds2rs
call ft_rs_ds2rs
test_loop0_begin:
call ft_rs_rscpy
loadn r0, #99
call ft_ds_push
call ft_type
call ft_dot
test_loop0_ploop:
call ft_rs_pop
inc r0
push r1
mov r1, r6
dec r1
loadi r1, r1
cmp r0, r1
push fr
call ft_rs_push
pop fr
pop r1
jle test_loop0_begin
test_loop0_leave:
dec r6
dec r6
rts

; &&& end of test

; &&& ft_emain
ft_emain:
call ft_setup
call test
halt

; &&& end of ft_emain

; &&& ft_ds_push
; r0 -- data to push
; ( -- <r0> )
ft_ds_push:
	storei r7, r0
	inc r7
	rts
; &&& end of ft_ds_push

; &&& ft_ds_swap
; ( a b -- b a )
ft_ds_swap:
	push r0
	push r1
	push r2
	mov r1, r7
	dec r1
	loadi r0, r1
	dec r1
	loadi r2, r1
	storei r1, r0
	inc r1
	storei r1, r2
	pop r2
	pop r1
	pop r0
	rts

; &&& end of ft_ds_swap

; &&& ft_ds_pop
; r0 -- data popped
; ( a -- ) r0 = a
ft_ds_pop:
	dec r7
	loadi r0, r7
	rts
; &&& end of ft_ds_pop

; &&& ft_rs_push
; r0 -- data to push
ft_rs_push:
	storei r6, r0
	inc r6
	rts
; &&& end of ft_rs_push

; &&& ft_rs_ds2rs
; ( a -- ) { -- a }
ft_rs_ds2rs:
	push r0
	call ft_ds_pop
	call ft_rs_push
	pop r0
	rts
; &&& end of ft_rs_ds2rs

; &&& ft_rs_rscpy
; ( -- a ) { a -- a }
ft_rs_rscpy:
	push r0
	push r1
	mov r1, r6
	dec r1
	loadi r0, r1
	call ft_ds_push
	pop r1
	pop r0
	rts
; &&& end of ft_rs_rscpy

; &&& ft_type
; ( address n -- )
; prints n chars of the string at address
ft_type:
	push r0
	push r1
	push r2
	push r3
	push r4
	push r5

	call ft_ds_pop
	mov r1, r0
	call ft_ds_pop
	xor r2, r2, r2
	load r3, FT_CONSOLE_CURSOR_POS
	load r4, FT_CONSOLE_COLOR

ft_type_loop:
	cmp r1, r2
	jeq ft_type_loop_end
	loadi r5, r0
	add r5, r5, r4
	outchar r5, r3
	inc r0
	dec r1
	inc r3
	jmp ft_type_loop

ft_type_loop_end:
	store FT_CONSOLE_CURSOR_POS, r3
	pop r5
	pop r4
	pop r3
	pop r2
	pop r1
	pop r0
	rts
; &&& end of ft_type

; &&& prim_printstr
; r0 : str
prim_printstr:
	push r0
	push r1
	push r2
	push r3
	push r4

	load r4, FT_CONSOLE_COLOR
	xor r2, r2, r2
	load r1, FT_CONSOLE_CURSOR_POS

prim_printstr_loop:
	loadi r3, r0
	cmp r3, r2
	jeq prim_printstr_loop_end
	add r3, r3, r4             ; add color to char
	outchar r3, r1
	inc r1
	inc r0
	jmp prim_printstr_loop

prim_printstr_loop_end:
    store FT_CONSOLE_CURSOR_POS, r1
	pop r4
	pop r3
	pop r2
	pop r1
	pop r0
	rts
; &&& end of prim_printstr

; &&& prim_printno
FT_NUMSTR_BUFFER: var #5
FT_NUMSTR_BUFFER_END: var #2

; r0 = no
prim_printno:
	push r0
	push r1
	push r2
	push r3
	push r4
	push r5
	push r6

	loadn r6, #'0'
	xor r5, r5, r5
	loadn r3, #10
	loadn r1, #FT_NUMSTR_BUFFER
	loadn r2, #FT_NUMSTR_BUFFER_END

prim_printno_loop:
	mod r4, r0, r3
	add r4, r4, r6
	storei r2, r4
	dec r2
	div r0, r0, r3
	cmp r0, r5
	jne prim_printno_loop

	inc r2
	mov r0, r2
prim_printno_fsl:
	loadi r1, r0
	cmp r1, r6
	jne prim_printno_fsl_end
	inc r0
	jmp prim_printno_fsl

prim_printno_fsl_end:
	call prim_printstr

	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	pop r1
	pop r0
	rts
; &&& end of prim_printno

; &&& ft_dot
ft_dot:
	push r0

	call ft_ds_pop
	call prim_printno
	load r0, FT_CONSOLE_CURSOR_POS
	inc r0
	store FT_CONSOLE_CURSOR_POS, r0

	pop r0
	rts

; &&& end of ft_dot

; &&& ft_rs_pop
; r0 -- data popped
ft_rs_pop:
	dec r6
	loadi r0, r6
	rts
; &&& end of ft_rs_pop

; &&& ft_setup
ft_setup:
	loadn r7, #FT_DATA_STACK_BEGIN
	loadn r6, #FT_RETURN_STACK_BEGIN
	rts
; &&& end of ft_setup



; *** END OF FUNCTIONS ***


; *** STATIC ***

; *** END OF STATIC ***
